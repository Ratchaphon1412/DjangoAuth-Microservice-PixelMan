version: "3"
services:
  app-auth-server:
    build: .
    volumes:
      - ./:/app
    working_dir: /app
    command: poetry run python3 manage.py runserver 0.0.0.0:8024
    ports:
      - "8024:8024"
    networks:
      - auth-network
      - default
    depends_on:
      db:
        condition: service_healthy
  db:
    image: postgres:13.1-alpine
    container_name: db
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGPORT=${PGPORT}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} "]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - auth-network
  vault:
    image: vault:1.13.3
    ports:
      - "8200:8200"
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN}
      VAULT_LOCAL_CONFIG: '{"storage": {"file": {"path": "/vault/file"}}, "default_lease_ttl": "168h", "max_lease_ttl": "720h", "ui": true}'
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    volumes:
      - ./vault:/vault/file:rw
    entrypoint: vault server -dev -dev-root-token-id=${VAULT_TOKEN}
    networks:
      - auth-network
  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx:/etc/nginx/conf.d
    depends_on:
      - app-auth-server
    networks:
      - auth-network
networks:
  auth-network:
    driver: bridge
